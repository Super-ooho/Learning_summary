// Node.js遵循CommonJS的模块化规范(只适用于服务器端的Javascript模块化)
//     导入用require()
//     导出用module.exports对象
//     好处是遵守同样的模块化规范写代码，极大方便各模块之间的相互调用

// 大一统的ES6模块化规范诞生了！
// 浏览器端和服务器端通用的模块化规范
// ES6：
// 1.每个js文件都是一个独立的模块
// 2.导入：import关键字
// 3.导出：export关键字

// ES6模块化3种用法：
// 1.默认导入和默认导出
// 2.按需导入和按需导出
// 3.直接导入并执行模块中的代码

// 默认导入和默认导出
// obj接收导入的对象
import obj from './01默认导入导出.js'
console.log(obj)
console.log(obj.fn(obj.a, obj.b))
// 默认导出default一个模块只能用一次


// 按需导入导出
// import { i, fn } from './02按需导入导出.js'
// 每个模块中可以多次按需导出
// 按需导入成员名称必须和按需到处的名称必须保持一致（类似对象解构）
// 可以用as关键字变换导入的名称
// 按需导入可以和默认导入一起使用
import info, { i, fn } from './02按需导入导出.js'
console.log(info.i)
console.log(i)
fn()


// 直接导入并执行模块中的代码
// 如果只想单纯地执行某个模块中的代码，并不需要得到模块中向外共享的成员，此时可以直接导入并执行模块代码
import './03直接执行不导入导出.js'//输出0，1，2


