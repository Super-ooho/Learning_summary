// JavaScript是单线程的语言，也就是说同一时间只能做一件事情
// 单线程执行任务队列的问题：如果前一个任务非常耗时，这后续任务就不得不一直等待，从而导致程序假死的问题
// 同步任务和异步任务
// 为了防止某个耗时任务导致程序假死的问题，JavaScript把待执行的任务分成两类
// 同步任务：又叫非耗时任务，指的是主线程上排队执行的任务，顺序执行
// 异步任务：又叫耗时任务，有JavaScript委托给宿主环境（执行环境，浏览器或者node环境）执行，执行后按照执行时间前后顺序将相应的回调函数传入任务队列（callback queue），当异步任务完成后，会通知JavaScript主线程执行异步任务的回调函数，主线程将栈中的同步任务完成后会执行任务队列中的回调函数
// JavaScript主线程会不断重复上面的步骤

// Eventloop基本概念
// JavaScript主线程从“任务队列”中读取异步任务的回调函数，放到执行栈中依次执行。这个过程是循环不断的，所以整个这种运行机制又称为EventLoop（事件循环）

// JavaScript把异步任务又分为两类，即宏任务和微任务
// 宏任务：异步Ajax请求，setTimeout和setInterval，文件操作
// 微任务：Promise.then,.catch,.finally
// 每一个宏任执行完成之后，都会检查是否有待执行的微任务，如果有，则执行所有微任务之后，再执行下一个宏任务（微任务的优先级更高）
// 同步任务 > 微任务 > 宏任务